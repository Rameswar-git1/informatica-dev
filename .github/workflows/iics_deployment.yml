
name: Promote Dev to UAT

on:
  workflow_dispatch:
    inputs:
      committed_sha:
        description: "Hash to deploy"
        required: true
        type: string

env:
  COMMIT_HASH: ${{ github.event.inputs.committed_sha }}
  IICS_LOGIN_URL: https://dm-us.informaticacloud.com
  IICS_POD_URL: https://usw5.dm-us.informaticacloud.com/saas
  IICS_USERNAME: ${{ secrets.IICS_USERNAME }}
  IICS_PASSWORD: ${{ secrets.IICS_PASSWORD }}
  UAT_IICS_USERNAME: ${{ secrets.UAT_IICS_USERNAME }}
  UAT_IICS_PASSWORD: ${{ secrets.UAT_IICS_PASSWORD }}

jobs:
  promote_to_uat:
    name: Promote Commit to UAT
    runs-on: ubuntu-latest
    environment: QA
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Set up Git
        run: |
          git config --global user.name "Brandon Bir"
          git config --global user.email "bbird@informatica.com"

      - name: Clone Source Repository
        run: |
          git clone --branch main https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/Rameswar-git1/informatica-dev.git source-repo

      - name: Clone Target Repository
        run: |
          git clone --branch main https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/Rameswar-git1/informatica_qa.git target-repo

      - name: Cherry-pick Commit and Handle Conflicts
        run: |
          cd target-repo
          git remote add source ../source-repo
          git fetch source

          echo "Attempting cherry-pick of commit $COMMIT_HASH..."
          git cherry-pick --strategy=recursive -X theirs $COMMIT_HASH || {
            echo "Cherry-pick failed. Attempting to resolve conflicts..."

            git status --porcelain | grep '^UU' | cut -c4- | while read file; do
              echo "Resolving conflict in $file by using source version..."
              git checkout $COMMIT_HASH -- "$file"
              git add "$file"
            done

            if git diff --cached --quiet; then
              echo "No changes to commit. Skipping cherry-pick."
              git cherry-pick --skip
            else
              git cherry-pick --continue || {
                echo "Cherry-pick still failed after conflict resolution."
                exit 1
              }
            fi
          }

          echo "Pushing changes to target repository..."
          git push origin main

      - name: Set UAT_COMMIT_HASH Environment Variable
        run: |
          cd target-repo
          echo "UAT_COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install requests

      - name: Login to IICS Dev Org
        run: |
          python -c "
import requests
import json

IICS_LOGIN_URL = 'https://dm-us.informaticacloud.com/ma/api/v2/user/login'
USERNAME = '${{ secrets.IICS_USERNAME }}'
PASSWORD = '${{ secrets.IICS_PASSWORD }}'

response = requests.post(IICS_LOGIN_URL, json={'username': USERNAME, 'password': PASSWORD})
response.raise_for_status()
session_id = response.headers['icSessionId']
print(f'Session ID: {session_id}')
"

      - name: Re-check-in Assets to IICS Dev Org
        run: |
          python -c "
import requests
import json

IICS_LOGIN_URL = 'https://dm-us.informaticacloud.com/ma/api/v2/user/login'
IICS_REPO_URL = 'https://usw5.dm-us.informaticacloud.com/saas/public/core/v3/repository'
USERNAME = '${{ secrets.IICS_USERNAME }}'
PASSWORD = '${{ secrets.IICS_PASSWORD }}'

ASSETS_TO_CHECKIN = [
    {'name': 'MyMapping1', 'type': 'MAPPING'},
    {'name': 'MyTaskflow1', 'type': 'TASKFLOW'},
    # Add more assets as needed
]

def login():
    response = requests.post(IICS_LOGIN_URL, json={'username': USERNAME, 'password': PASSWORD})
    response.raise_for_status()
    return response.headers['icSessionId']

def checkin_asset(session_id, asset):
    headers = {
        'INFA-SESSION-ID': session_id,
        'Content-Type': 'application/json'
    }
    payload = {
        'name': asset['name'],
        'type': asset['type'],
        'operation': 'CHECKIN'
    }
    response = requests.post(f'{IICS_REPO_URL}/actions/checkin', headers=headers, json=payload)
    if response.status_code == 200:
        print(f'Successfully checked in: {asset['name']}')
    else:
        print(f'Failed to check in {asset['name']}: {response.text}')

if __name__ == '__main__':
    try:
        session_id = login()
        for asset in ASSETS_TO_CHECKIN:
            checkin_asset(session_id, asset)
    except Exception as e:
        print(f'Error: {e}')
"

      - name: Sync and Test UAT Deployment
        run: python ./source-repo/scripts/infa_update_and_test.py
